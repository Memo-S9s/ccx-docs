#!/usr/bin/env python3

import os
import json
import yaml
import sys

def collect_docs_from_directory(dir_name):
    """
    Recursively collects all .md files from the specified directory.
    """
    docs = []
    dir_path = os.path.join('docs', dir_name)
    if not os.path.exists(dir_path):
        print(f"Warning: Directory '{dir_path}' does not exist.")
        return docs

    for root, _, files in os.walk(dir_path):
        for file in sorted(files):
            if file.endswith('.md'):
                file_path = os.path.join(root, file)
                # Generate the doc id relative to 'docs' directory
                doc_id = os.path.relpath(file_path, 'docs').replace('\\', '/')
                # Remove the '.md' extension
                doc_id = doc_id[:-3]
                label = os.path.splitext(os.path.basename(file))[0]
                # Build the label path based on subdirectories
                relative_dir = os.path.relpath(root, dir_path).replace('\\', '/')
                if relative_dir != '.':
                    label = f"{relative_dir}/{label}"
                docs.append({label: doc_id + '.md'})

    return docs

def convert_to_mkdocs_nav(items):
    """
    Converts the Docusaurus sidebar items to MkDocs nav structure.
    """
    nav = []

    if isinstance(items, dict):
        # If items is a dict, wrap it in a list
        items = [items]

    for item in items:
        if isinstance(item, dict):
            item_type = item.get('type', None)

            if item_type == 'category':
                label = item.get('label', 'Untitled')
                sub_items = item.get('items', [])
                nav_entry = {label: convert_to_mkdocs_nav(sub_items)}
                nav.append(nav_entry)
            elif item_type == 'doc':
                label = item.get('label', item.get('id', ''))
                doc_path = item.get('id', '') + '.md'
                nav.append({label: doc_path})
            elif item_type == 'link':
                label = item.get('label', '')
                href = item.get('href', '')
                nav.append({label: href})
            elif item_type == 'autogenerated':
                dir_name = item.get('dirName', '')
                # Collect all .md files under dir_name
                docs = collect_docs_from_directory(dir_name)
                if docs:
                    nav_entry = {item.get('label', dir_name): docs}
                    nav.append(nav_entry)
                else:
                    nav.extend(docs)
            else:
                print(f"Warning: Unsupported item type '{item_type}'")
        elif isinstance(item, str):
            # Handle the case where item is a string (doc ID)
            doc_path = item + '.md'
            label = os.path.basename(item)
            nav.append({label: doc_path})
        else:
            print(f"Warning: Unexpected item type: {type(item)}")
    return nav

def main():
    sidebars_json_path = 'sidebars.json'
    if not os.path.exists(sidebars_json_path):
        print(f"Error: '{sidebars_json_path}' does not exist. Please run the Node.js script to generate it.")
        sys.exit(1)

    with open(sidebars_json_path, 'r', encoding='utf-8') as f:
        sidebars_data = json.load(f)

    # Access the actual sidebars data
    sidebars = sidebars_data.get('sidebars', {})

    # For this specific case, process 'tutorialSidebar'
    items = sidebars.get('tutorialSidebar', [])

    if not items:
        print("Error: 'tutorialSidebar' not found in sidebars.json.")
        sys.exit(1)

    # Convert the sidebar items to MkDocs nav
    mkdocs_nav = convert_to_mkdocs_nav(items)

    # Output the nav structure in YAML format
    mkdocs_yaml = yaml.dump({'nav': mkdocs_nav}, sort_keys=False, allow_unicode=True, width=float("inf"))
    print(mkdocs_yaml)

if __name__ == '__main__':
    main()

